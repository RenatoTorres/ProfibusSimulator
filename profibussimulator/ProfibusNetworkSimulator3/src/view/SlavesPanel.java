/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SlavesPanel.java
 *
 * Created on 19/05/2010, 16:31:32
 */
package view;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.ArrayList;

/**
 *
 * @author eduardo_mossin
 */
public class SlavesPanel extends javax.swing.JPanel {

    private String test;
    protected ArrayList<SlavePanel> slavePanelList = new ArrayList<SlavePanel>();
    private static final int NUM_OFF_SLAVES = 127;

    /** Creates new form SlavesPanel */
    public SlavesPanel() {
        initComponents();
    }

    public void startIcons() {
        GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new Insets(0, 0, 0, 0);
        gridBagConstraints.anchor = GridBagConstraints.CENTER;
        this.setLayout(new GridBagLayout());

        int address = 0;
        for (int l = 0; l < ((NUM_OFF_SLAVES / 10)+1); l++) {
            gridBagConstraints.gridy = l;
            for (int c = 0; c < 10; c++) {
                gridBagConstraints.gridx = c;
                SlavePanel slavePanel = createSlave();
                slavePanel.setIcon();
                slavePanel.setAddressLabel(address++);
                slavePanelList.add(slavePanel);
                //slavePanel.setPreferredSize(new Dimension(88, 44));
                if(NUM_OFF_SLAVES>=address){
                this.add(slavePanel, gridBagConstraints);
                }
                
            }
        }
    }

    protected SlavePanel createSlave() {
        return new SimulationSlavePanel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(920, 330));
        setMinimumSize(new java.awt.Dimension(920, 330));
        setName("Form"); // NOI18N
        setPreferredSize(new java.awt.Dimension(920, 330));
        setRequestFocusEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1026, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 414, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the test
     */
    public String getTest() {
        return test;
    }

    /**
     * @param test the test to set
     */
    public void setTest(String test) {
        this.test = test;
    }

    public boolean[] getLiveList( )
    {
        boolean livelist[] = new boolean[NUM_OFF_SLAVES];
        for(int i=0; i < NUM_OFF_SLAVES; i++)
        {
            if( slavePanelList.get(i).isIsOn() == true)
                livelist[i] = true;
            else
                livelist[i] = false;
        }
        return livelist;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
