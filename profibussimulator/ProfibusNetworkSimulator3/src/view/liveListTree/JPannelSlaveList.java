/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPannelSlaveList.java
 *
 * Created on Apr 16, 2012, 11:03:54 AM
 */
package view.liveListTree;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableModel;
import view.fdl.ComponentEventSwitch;
import view.fdl.FDLAnalysis.FDLTelegramsTable;

/**
 *
 * @author Renato Veiga
 */
public final class JPannelSlaveList extends javax.swing.JPanel {

    public static final int MAX_SLAVE_ADDR = 127;
    public int SlaveColorForeground[][] = new int[127][3];
    public int SlaveColorBackground[][] = new int[127][3];
    private final FDLTelegramsTable mainFrame;
    private int currentAddr = 0;

    
    /** Creates new form JPannelSlaveList */
    public JPannelSlaveList(FDLTelegramsTable par) {
        
        mainFrame = par;
        SetDefaultSlaveColors( );
        initComponents();
        
        jTable1.addMouseListener(new PopClickListener());        
        ComponentEventSwitch.Register( this, ComponentEventSwitch.TABLE_LIVE_LIST );
    }
    
    public void SetDefaultSlaveColors( )
    {
        for(int i = 0; i < MAX_SLAVE_ADDR; i++)
        {
            SlaveColorForeground[i][0] = 171;
            SlaveColorForeground[i][1] = 171;
            SlaveColorForeground[i][2] = 171;
                    
            SlaveColorBackground[i][0] = 255;
            SlaveColorBackground[i][1] = 255;
            SlaveColorBackground[i][2] = 255;
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTable1 = new javax.swing.JTable();

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(profibusnetworksimulator.ProfibusNetworkSimulatorAppNew.class).getContext().getResourceMap(JPannelSlaveList.class);
        jTable1.setBackground(resourceMap.getColor("jTable1.background")); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCellSelectionEnabled(true);
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        InitializeSlaveTable();
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        add(jTable1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
   int row = jTable1.getSelectedRow();
   int col = jTable1.getSelectedColumn();
   
   int addr = row*10+col;
   
   if( addr < MAX_SLAVE_ADDR )
   {
    mainFrame.setAddrSelectedInLiveListGridEvt( addr );   
    currentAddr = addr;
   }
   
   ComponentEventSwitch.Fire();
   
}//GEN-LAST:event_jTable1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

public int getCurrentAddr( )    
{
    return currentAddr;
}
    
void InitializeSlaveTable( )
{
    //Remove Header Line
    jTable1.setTableHeader(null);
        
    //Fill with slave addresses
    TableModel model;
    for( int i=0; i < jTable1.getRowCount(); i++) //Lines
    {
        for(int j=0; (j < 10) && ((i*10 +j) < MAX_SLAVE_ADDR); j++ )  //Columns
        {
            model = jTable1.getModel();
            model.setValueAt(new Integer(i*10+j), i, j);
        }
    }
    
    jTable1.setDefaultRenderer( jTable1.getColumnClass(0), new YourTableCellRenderer() );
}

void SetSlaveProperties( int slave_addr, int properties)
{
    TableModel model = jTable1.getModel();
    int row = slave_addr / 10;
    int col = slave_addr % 10;
    
}

public void SetDataExchangeStation( int slvaddr )
{
    //Foreground: BLUE
    SlaveColorForeground[slvaddr][0] = 0;
    SlaveColorForeground[slvaddr][1] = 0;
    SlaveColorForeground[slvaddr][2] = 255;

    //Background: GREEN
    SlaveColorBackground[slvaddr][0] = 0;
    SlaveColorBackground[slvaddr][1] = 255;
    SlaveColorBackground[slvaddr][2] = 0;
}

public void SetOperationalStation( int slvaddr )
{
    //Foreground: BLUE
    SlaveColorForeground[slvaddr][0] = 0;
    SlaveColorForeground[slvaddr][1] = 0;
    SlaveColorForeground[slvaddr][2] = 255;

    //Background: WHITE
    SlaveColorBackground[slvaddr][0] = 255;
    SlaveColorBackground[slvaddr][1] = 255;
    SlaveColorBackground[slvaddr][2] = 255;
}

public void SetSyncLostStation( int slvaddr )
{
    //Foreground: RED
    SlaveColorForeground[slvaddr][0] = 255;
    SlaveColorForeground[slvaddr][1] = 0;
    SlaveColorForeground[slvaddr][2] = 0;

    //Background: YELLOW
    SlaveColorBackground[slvaddr][0] = 255;
    SlaveColorBackground[slvaddr][1] = 255;
    SlaveColorBackground[slvaddr][2] = 0;
}

public void SetOfflineStation( int slvaddr )
{
    //Foreground: GRAY
    SlaveColorForeground[slvaddr][0] = 171;
    SlaveColorForeground[slvaddr][1] = 171;
    SlaveColorForeground[slvaddr][2] = 171;

    //Background: WHITE    
    SlaveColorBackground[slvaddr][0] = 255;
    SlaveColorBackground[slvaddr][1] = 255;
    SlaveColorBackground[slvaddr][2] = 255;
}

public void SetMasterStation( int slvaddr )
{
    //Foreground: RED
    SlaveColorForeground[slvaddr][0] = 255;
    SlaveColorForeground[slvaddr][1] = 0;
    SlaveColorForeground[slvaddr][2] = 0;

    //Background: WHITE
    SlaveColorBackground[slvaddr][0] = 255;
    SlaveColorBackground[slvaddr][1] = 255;
    SlaveColorBackground[slvaddr][2] = 255;
}

public void SetDiagStation( int slvaddr )
{
    //Foreground: RED
    SlaveColorForeground[slvaddr][0] = 255;
    SlaveColorForeground[slvaddr][1] = 0;
    SlaveColorForeground[slvaddr][2] = 0;

    //Background: GREEN
    SlaveColorBackground[slvaddr][0] = 0;
    SlaveColorBackground[slvaddr][1] = 255;
    SlaveColorBackground[slvaddr][2] = 0;
}

public void SetCfgErrorStation(int slvaddr )
{
    //Foreground: BLACK
    SlaveColorForeground[slvaddr][0] = 0;
    SlaveColorForeground[slvaddr][1] = 0;
    SlaveColorForeground[slvaddr][2] = 0;

    //Background: PURPLE
    SlaveColorBackground[slvaddr][0] = 139;
    SlaveColorBackground[slvaddr][1] = 0;
    SlaveColorBackground[slvaddr][2] = 139;
}

public void SetPrmErrorStation(int slvaddr )
{
    //Foreground: BLUE
    SlaveColorForeground[slvaddr][0] = 0;
    SlaveColorForeground[slvaddr][1] = 0;
    SlaveColorForeground[slvaddr][2] = 255;

    //Background: RED
    SlaveColorBackground[slvaddr][0] = 255;
    SlaveColorBackground[slvaddr][1] = 0;
    SlaveColorBackground[slvaddr][2] = 0;
}
        

public class YourTableCellRenderer
       extends DefaultTableCellRenderer {
        @Override
  public Component getTableCellRendererComponent(JTable table,
                                                 Object value,
                                                 boolean isSelected,
                                                 boolean hasFocus,
                                                 int row,
                                                 int col) {
    Component c = 
      super.getTableCellRendererComponent(table, value,
                                          isSelected, hasFocus,
                                          row, col);

    // Only for specific cell
    //if (row == SPECIAL_ROW && col == SPECIAL_COULMN) {
       //c.setFont(/* special font*/);
       // you may want to address isSelected here too
       int slvaddr = row*10 + col;
       if( slvaddr < MAX_SLAVE_ADDR )
       {
           c.setForeground( new Color(SlaveColorForeground[slvaddr][0], SlaveColorForeground[slvaddr][1], SlaveColorForeground[slvaddr][2])  );
           c.setBackground( new Color(SlaveColorBackground[slvaddr][0], SlaveColorBackground[slvaddr][1], SlaveColorBackground[slvaddr][2])  );
       }
    //}
    
    return c;
  
        }
    }

    class PopClickListener extends MouseAdapter {
        public void mousePressed(MouseEvent e){
            if (e.isPopupTrigger())
                doPop(e);
        }

        public void mouseReleased(MouseEvent e){
            if (e.isPopupTrigger())
                doPop(e);
        }

        private void doPop(MouseEvent e){
            int row = jTable1.getSelectedRow();
            int col = jTable1.getSelectedColumn();

            int addr = row*10+col;

            if( addr < MAX_SLAVE_ADDR ) {
                PopUpMenuLiveList menu = new PopUpMenuLiveList( addr );
                menu.show(e.getComponent(), e.getX(), e.getY());
                System.out.println("Row Value (2): " + String.valueOf(row));
            }
        }
    }
}
